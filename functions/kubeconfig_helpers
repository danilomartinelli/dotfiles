# Kubeconfig helper functions

# List available kubeconfigs from environment
list_kubeconfigs() {
  echo "Available kubeconfigs:"
  env | grep '^KUBECONFIG_' | sed 's/KUBECONFIG_/  - /' | sed 's/=.*//' | tr '[:upper:]' '[:lower:]'
}

# Clear current kubeconfig
clear_kubeconfig() {
  if [[ -n "$KUBECONFIG" && -f "$KUBECONFIG" ]]; then
    # Remove temporary kubeconfig file
    rm -f "$KUBECONFIG" 2>/dev/null
  fi
  
  unset CURRENT_KUBECONFIG
  unset KUBECONFIG
  
  echo "✅ Kubeconfig cleared"
}

# Show current kubeconfig
current_kubeconfig() {
  if [[ -n "$CURRENT_KUBECONFIG" ]]; then
    echo "Current kubeconfig: $CURRENT_KUBECONFIG"
    if command -v kubectl &> /dev/null; then
      echo "Current context: $(kubectl config current-context 2>/dev/null || echo 'none')"
      echo "Current namespace: $(kubectl config view --minify -o jsonpath='{..namespace}' 2>/dev/null || echo 'default')"
    fi
  else
    echo "No kubeconfig currently active"
    echo "Use 'use_kubeconfig <name>' to activate a kubeconfig"
    echo "Use 'list_kubeconfigs' to see available kubeconfigs"
  fi
}

# Quick kubeconfig switcher with fzf
kubeconfig() {
  if ! command -v fzf &> /dev/null; then
    echo "⚠️  fzf is required for this function"
    echo "Install with: brew install fzf"
    return 1
  fi
  
  local config
  config=$(list_kubeconfigs | grep -E '^\s+-' | sed 's/  - //' | fzf --prompt="Select kubeconfig: ")
  
  if [[ -n "$config" ]]; then
    use_kubeconfig "$config"
  fi
}

# Validate kubeconfig and cluster connection
validate_kubeconfig() {
  if ! command -v kubectl &> /dev/null; then
    echo "⚠️  kubectl is not installed"
    return 1
  fi
  
  echo "Validating kubeconfig..."
  if kubectl cluster-info &>/dev/null; then
    echo "✅ Kubeconfig is valid and cluster is reachable"
    kubectl cluster-info
  else
    echo "❌ Unable to connect to cluster"
    return 1
  fi
}

# Merge multiple kubeconfigs
merge_kubeconfigs() {
  local output="${1:-merged-kubeconfig.yaml}"
  shift
  
  if [[ $# -eq 0 ]]; then
    echo "Usage: merge_kubeconfigs <output_file> <config1> <config2> ..."
    echo "Merges multiple kubeconfig files into one"
    return 1
  fi
  
  local configs=""
  for config in "$@"; do
    if [[ -f "$config" ]]; then
      configs="$configs:$config"
    else
      echo "⚠️  File not found: $config"
    fi
  done
  
  # Remove leading colon
  configs="${configs#:}"
  
  if [[ -n "$configs" ]]; then
    KUBECONFIG="$configs" kubectl config view --flatten > "$output"
    echo "✅ Kubeconfigs merged into $output"
  else
    echo "❌ No valid config files provided"
    return 1
  fi
}

# Backup current kubeconfig
backup_kubeconfig() {
  local backup_name="${1:-kubeconfig-backup-$(date +%Y%m%d-%H%M%S).yaml}"
  
  if [[ -n "$KUBECONFIG" && -f "$KUBECONFIG" ]]; then
    cp "$KUBECONFIG" "$backup_name"
    echo "✅ Kubeconfig backed up to $backup_name"
  else
    echo "❌ No active kubeconfig to backup"
    return 1
  fi
}

# Switch between kubectl contexts with fzf
kcontext() {
  if ! command -v fzf &> /dev/null; then
    echo "⚠️  fzf is required for this function"
    echo "Install with: brew install fzf"
    return 1
  fi
  
  if ! command -v kubectl &> /dev/null; then
    echo "⚠️  kubectl is not installed"
    return 1
  fi
  
  local context
  context=$(kubectl config get-contexts -o name | fzf --prompt="Select context: ")
  
  if [[ -n "$context" ]]; then
    kubectl config use-context "$context"
    echo "✅ Switched to context: $context"
  fi
}

# Quick cluster info
cluster_info() {
  if ! command -v kubectl &> /dev/null; then
    echo "⚠️  kubectl is not installed"
    return 1
  fi
  
  echo "Cluster Information:"
  echo "==================="
  echo "Current context: $(kubectl config current-context 2>/dev/null || echo 'none')"
  echo "Current namespace: $(kubectl config view --minify -o jsonpath='{..namespace}' 2>/dev/null || echo 'default')"
  echo ""
  echo "Cluster details:"
  kubectl cluster-info 2>/dev/null || echo "Unable to connect to cluster"
  echo ""
  echo "Nodes:"
  kubectl get nodes 2>/dev/null || echo "Unable to get node information"
}