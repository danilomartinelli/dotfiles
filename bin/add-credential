#!/usr/bin/env bash
#
# Add AWS or Kubernetes credentials to .localrc
#
# This script helps you add base64-encoded credentials to your .localrc file
# for use with use_aws_profile and use_kubeconfig functions

set -e

LOCALRC="$HOME/.localrc"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Ensure .localrc exists
if [[ ! -f "$LOCALRC" ]]; then
    echo -e "${YELLOW}Creating .localrc file...${NC}"
    touch "$LOCALRC"
    chmod 600 "$LOCALRC"
fi

show_help() {
    cat << EOF
Usage: add-credential [aws|kube] <name> <file>

Add AWS or Kubernetes credentials to .localrc

Commands:
  aws <name> <file>    Add AWS credentials file
  kube <name> <file>   Add Kubernetes config file
  list                 List existing credentials
  help                 Show this help message

Examples:
  add-credential aws prod ~/.aws/credentials-prod
  add-credential kube staging ~/kubeconfig-staging.yaml
  add-credential list

The credentials are stored as base64-encoded environment variables in ~/.localrc:
  - AWS: AWS_PROFILE_<NAME> (uppercase)
  - Kubernetes: KUBECONFIG_<NAME> (uppercase)

To use the credentials after adding:
  use_aws_profile <name>
  use_kubeconfig <name>
EOF
}

list_credentials() {
    echo -e "${GREEN}=== AWS Profiles ===${NC}"
    if grep -q "^export AWS_PROFILE_" "$LOCALRC" 2>/dev/null; then
        grep "^export AWS_PROFILE_" "$LOCALRC" | sed 's/export AWS_PROFILE_/  - /' | sed 's/=.*//' | tr '[:upper:]' '[:lower:]'
    else
        echo "  (none)"
    fi
    
    echo ""
    echo -e "${GREEN}=== Kubernetes Configs ===${NC}"
    if grep -q "^export KUBECONFIG_" "$LOCALRC" 2>/dev/null; then
        grep "^export KUBECONFIG_" "$LOCALRC" | sed 's/export KUBECONFIG_/  - /' | sed 's/=.*//' | tr '[:upper:]' '[:lower:]'
    else
        echo "  (none)"
    fi
}

add_aws_credential() {
    local name="$1"
    local file="$2"
    
    if [[ -z "$name" || -z "$file" ]]; then
        echo -e "${RED}Error: Name and file are required${NC}"
        echo "Usage: add-credential aws <name> <file>"
        exit 1
    fi
    
    if [[ ! -f "$file" ]]; then
        echo -e "${RED}Error: File not found: $file${NC}"
        exit 1
    fi
    
    # Validate it's a valid AWS credentials file
    if ! grep -q "aws_access_key_id\|aws_secret_access_key" "$file"; then
        echo -e "${YELLOW}Warning: File doesn't appear to be an AWS credentials file${NC}"
        echo -n "Continue anyway? (y/N): "
        read -r confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
            echo "Cancelled"
            exit 0
        fi
    fi
    
    local upper_name="${name^^}"
    local var_name="AWS_PROFILE_${upper_name}"
    
    # Check if already exists
    if grep -q "^export $var_name=" "$LOCALRC"; then
        echo -e "${YELLOW}Credential $name already exists${NC}"
        echo -n "Overwrite? (y/N): "
        read -r confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
            echo "Cancelled"
            exit 0
        fi
        # Remove old entry
        sed -i.bak "/^export $var_name=/d" "$LOCALRC"
    fi
    
    # Encode and add to .localrc
    local encoded=$(base64 < "$file")
    echo "" >> "$LOCALRC"
    echo "# AWS Profile: $name" >> "$LOCALRC"
    echo "export $var_name=\"$encoded\"" >> "$LOCALRC"
    
    echo -e "${GREEN}✅ AWS profile '$name' added successfully${NC}"
    echo "To use: use_aws_profile $name"
}

add_kube_credential() {
    local name="$1"
    local file="$2"
    
    if [[ -z "$name" || -z "$file" ]]; then
        echo -e "${RED}Error: Name and file are required${NC}"
        echo "Usage: add-credential kube <name> <file>"
        exit 1
    fi
    
    if [[ ! -f "$file" ]]; then
        echo -e "${RED}Error: File not found: $file${NC}"
        exit 1
    fi
    
    # Validate it's a valid kubeconfig file
    if ! grep -q "apiVersion:\|clusters:\|contexts:" "$file"; then
        echo -e "${YELLOW}Warning: File doesn't appear to be a kubeconfig file${NC}"
        echo -n "Continue anyway? (y/N): "
        read -r confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
            echo "Cancelled"
            exit 0
        fi
    fi
    
    local upper_name="${name^^}"
    local var_name="KUBECONFIG_${upper_name}"
    
    # Check if already exists
    if grep -q "^export $var_name=" "$LOCALRC"; then
        echo -e "${YELLOW}Credential $name already exists${NC}"
        echo -n "Overwrite? (y/N): "
        read -r confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
            echo "Cancelled"
            exit 0
        fi
        # Remove old entry
        sed -i.bak "/^export $var_name=/d" "$LOCALRC"
    fi
    
    # Encode and add to .localrc
    local encoded=$(base64 < "$file")
    echo "" >> "$LOCALRC"
    echo "# Kubernetes Config: $name" >> "$LOCALRC"
    echo "export $var_name=\"$encoded\"" >> "$LOCALRC"
    
    echo -e "${GREEN}✅ Kubeconfig '$name' added successfully${NC}"
    echo "To use: use_kubeconfig $name"
}

# Main command handling
case "$1" in
    aws)
        add_aws_credential "$2" "$3"
        ;;
    kube)
        add_kube_credential "$2" "$3"
        ;;
    list)
        list_credentials
        ;;
    help|--help|-h|"")
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac